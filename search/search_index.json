{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Alan Liang <p>Staff Platform Engineer</p> <p>I architect and scale cloud infrastructure at Commonwealth Bank of Australia, specializing in AWS, DevOps, and Kubernetes solutions. I love solving complex distributed systems challenges and mentoring teams on cloud-native best practices.</p> :material-email: :fontawesome-brands-linkedin: :fontawesome-brands-github: About Projects Blog About Me <p>I'm a passionate Staff Platform Engineer at Commonwealth Bank of Australia with extensive experience building and scaling cloud-native infrastructure. My expertise spans infrastructure as code, CI/CD pipelines, and container orchestration at enterprise scale.</p> AWS Kubernetes Docker Terraform Jenkins Python Go GitOps Projects Multi-Cloud Platform Migration <p>Led enterprise-scale migration of legacy systems to AWS, implementing microservices architecture with 99.9% uptime and 40% cost reduction.</p> AWS EKS Terraform Istio ArgoCD CI/CD Pipeline Optimization <p>Built automated deployment pipelines reducing deployment time from hours to minutes, with comprehensive testing and rollback capabilities.</p> Jenkins GitLab CI Docker Helm Kubernetes Platform Engineering <p>Designed and implemented self-service Kubernetes platform serving 50+ development teams with automated scaling and monitoring.</p> Kubernetes Prometheus Grafana FluxCD    \u00a9 2024 Alan Liang. All rights reserved."},{"location":"404/","title":"404 - Page not found","text":"<p>Sorry, the page you're looking for doesn't exist.</p> <p>Return to Home</p>"},{"location":"blog/","title":"Tech Blog","text":"<p>Welcome to my technical blog where I share insights on cloud architecture, platform engineering, and DevOps practices. Here you'll find articles about AWS, Kubernetes, GitOps, and other cloud-native technologies based on my real-world experience.</p>"},{"location":"blog/#latest-posts","title":"Latest Posts","text":"<p>The blog posts below cover various topics related to cloud infrastructure, DevOps practices, and platform engineering. I hope you find them useful!</p>"},{"location":"blog/2024/07/08/aws-cost-optimization-strategies/","title":"AWS Cost Optimization Strategies","text":"<p>Cloud costs can spiral out of control quickly, especially in large organizations. Here's how we reduced our AWS bill by 40% without compromising performance or reliability.</p>","tags":["aws","cost","optimization","cloud","finance"]},{"location":"blog/2024/07/08/aws-cost-optimization-strategies/#the-problem","title":"The Problem","text":"<p>Our monthly AWS bill had grown to over $500K, with costs increasing 20% quarter-over-quarter. Leadership wanted answers, and more importantly, they wanted results.</p>","tags":["aws","cost","optimization","cloud","finance"]},{"location":"blog/2024/07/08/aws-cost-optimization-strategies/#our-approach","title":"Our Approach","text":"","tags":["aws","cost","optimization","cloud","finance"]},{"location":"blog/2024/07/08/aws-cost-optimization-strategies/#1-visibility-first","title":"1. Visibility First","text":"<p>You can't optimize what you can't measure. We implemented comprehensive cost tracking:</p> <pre><code># Cost allocation tagging strategy\nREQUIRED_TAGS = {\n    'Environment': ['prod', 'staging', 'dev'],\n    'Team': 'team-name',\n    'Project': 'project-code',\n    'CostCenter': 'cost-center-id'\n}\n\n# Automated tagging enforcement\ndef enforce_tagging(resource):\n    missing_tags = []\n    for tag, values in REQUIRED_TAGS.items():\n        if tag not in resource.tags:\n            missing_tags.append(tag)\n\n    if missing_tags:\n        send_alert(f\"Resource {resource.id} missing tags: {missing_tags}\")\n        # Auto-shutdown non-compliant resources after 7 days\n</code></pre>","tags":["aws","cost","optimization","cloud","finance"]},{"location":"blog/2024/07/08/aws-cost-optimization-strategies/#2-right-sizing-instances","title":"2. Right-Sizing Instances","text":"<p>We found that 60% of our EC2 instances were over-provisioned:</p> <ul> <li>Analysis period: 30 days of CloudWatch metrics</li> <li>Key metrics: CPU utilization, memory usage, network I/O</li> <li>Action: Automated recommendations with approval workflow</li> </ul> <p>Results: 25% reduction in EC2 costs</p>","tags":["aws","cost","optimization","cloud","finance"]},{"location":"blog/2024/07/08/aws-cost-optimization-strategies/#3-reserved-instance-strategy","title":"3. Reserved Instance Strategy","text":"<p>Implemented a data-driven RI purchasing strategy:</p> <pre><code># Calculate optimal RI mix\naws ce get-reservation-coverage \\\n  --time-period Start=2024-01-01,End=2024-01-31 \\\n  --group-by Type=DIMENSION,Key=SERVICE \\\n  --metrics UnblendedCost\n</code></pre> <p>Results: 30% savings on predictable workloads</p>","tags":["aws","cost","optimization","cloud","finance"]},{"location":"blog/2024/07/08/aws-cost-optimization-strategies/#4-storage-optimization","title":"4. Storage Optimization","text":"<p>S3 storage was our second-largest cost driver:</p> <ul> <li>Lifecycle policies: Automatic transition to IA/Glacier</li> <li>Intelligent Tiering: For unpredictable access patterns</li> <li>Duplicate detection: Removed 2TB of duplicate data</li> </ul> <pre><code>{\n  \"Rules\": [{\n    \"ID\": \"OptimizeStorage\",\n    \"Status\": \"Enabled\",\n    \"Transitions\": [\n      {\n        \"Days\": 30,\n        \"StorageClass\": \"STANDARD_IA\"\n      },\n      {\n        \"Days\": 90,\n        \"StorageClass\": \"GLACIER\"\n      }\n    ]\n  }]\n}\n</code></pre>","tags":["aws","cost","optimization","cloud","finance"]},{"location":"blog/2024/07/08/aws-cost-optimization-strategies/#5-auto-scaling-optimization","title":"5. Auto-Scaling Optimization","text":"<p>Fine-tuned our auto-scaling policies:</p> <ul> <li>Predictive scaling: Based on historical patterns</li> <li>Custom metrics: Application-specific scaling triggers</li> <li>Scheduled scaling: For known traffic patterns</li> </ul>","tags":["aws","cost","optimization","cloud","finance"]},{"location":"blog/2024/07/08/aws-cost-optimization-strategies/#monitoring-and-governance","title":"Monitoring and Governance","text":"","tags":["aws","cost","optimization","cloud","finance"]},{"location":"blog/2024/07/08/aws-cost-optimization-strategies/#cost-anomaly-detection","title":"Cost Anomaly Detection","text":"<p>Set up automated alerts for unusual spending:</p> <pre><code># CloudWatch alarm for cost anomalies\nCostAnomalyAlarm:\n  Type: AWS::CloudWatch::Alarm\n  Properties:\n    AlarmName: UnusualSpending\n    MetricName: EstimatedCharges\n    Threshold: 1000\n    ComparisonOperator: GreaterThanThreshold\n    EvaluationPeriods: 1\n</code></pre>","tags":["aws","cost","optimization","cloud","finance"]},{"location":"blog/2024/07/08/aws-cost-optimization-strategies/#regular-cost-reviews","title":"Regular Cost Reviews","text":"<p>Monthly cost review meetings with: - Team leads - Finance stakeholders - Engineering managers</p>","tags":["aws","cost","optimization","cloud","finance"]},{"location":"blog/2024/07/08/aws-cost-optimization-strategies/#results-after-6-months","title":"Results After 6 Months","text":"Category Before After Savings EC2 $200K $150K 25% S3 $80K $50K 37% RDS $120K $90K 25% Total $500K $300K 40%","tags":["aws","cost","optimization","cloud","finance"]},{"location":"blog/2024/07/08/aws-cost-optimization-strategies/#key-lessons","title":"Key Lessons","text":"<ol> <li>Tagging is critical - Without proper tagging, you're flying blind</li> <li>Automate everything - Manual cost optimization doesn't scale</li> <li>Culture matters - Make cost awareness part of your engineering culture</li> <li>Regular reviews - Set up recurring cost review processes</li> <li>Start small - Pick low-hanging fruit first to build momentum</li> </ol>","tags":["aws","cost","optimization","cloud","finance"]},{"location":"blog/2024/07/08/aws-cost-optimization-strategies/#tools-we-used","title":"Tools We Used","text":"<ul> <li>AWS Cost Explorer: For analysis and reporting</li> <li>AWS Trusted Advisor: For optimization recommendations  </li> <li>CloudHealth: For multi-account cost management</li> <li>Custom dashboards: Built with CloudWatch and Grafana</li> </ul> <p>Cost optimization isn't a one-time project - it's an ongoing discipline that requires the right tools, processes, and culture.</p>","tags":["aws","cost","optimization","cloud","finance"]},{"location":"blog/2024/07/01/gitops-with-argocd-best-practices/","title":"GitOps with ArgoCD: Best Practices","text":"<p>GitOps has transformed how we manage deployments at scale. Here's what we've learned implementing GitOps with ArgoCD across multiple environments and teams.</p>","tags":["gitops","argocd","kubernetes","ci/cd","deployment"]},{"location":"blog/2024/07/01/gitops-with-argocd-best-practices/#why-gitops","title":"Why GitOps?","text":"<p>Traditional deployment methods often suffer from: - Configuration drift between environments - Lack of audit trails for changes - Manual deployment processes that don't scale - Inconsistent rollback procedures</p> <p>GitOps solves these problems by making Git the single source of truth for your infrastructure and applications.</p>","tags":["gitops","argocd","kubernetes","ci/cd","deployment"]},{"location":"blog/2024/07/01/gitops-with-argocd-best-practices/#our-gitops-architecture","title":"Our GitOps Architecture","text":"","tags":["gitops","argocd","kubernetes","ci/cd","deployment"]},{"location":"blog/2024/07/01/gitops-with-argocd-best-practices/#repository-structure","title":"Repository Structure","text":"<p>We use a multi-repo approach with clear separation of concerns:</p> <pre><code>\u251c\u2500\u2500 application-repos/\n\u2502   \u251c\u2500\u2500 service-a/\n\u2502   \u251c\u2500\u2500 service-b/\n\u2502   \u2514\u2500\u2500 service-c/\n\u2514\u2500\u2500 gitops-repos/\n    \u251c\u2500\u2500 dev/\n    \u251c\u2500\u2500 staging/\n    \u2514\u2500\u2500 production/\n</code></pre>","tags":["gitops","argocd","kubernetes","ci/cd","deployment"]},{"location":"blog/2024/07/01/gitops-with-argocd-best-practices/#argocd-application-structure","title":"ArgoCD Application Structure","text":"<p>Each application follows a consistent pattern:</p> <pre><code>apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: service-a\n  namespace: argocd\nspec:\n  project: default\n  source:\n    repoURL: https://github.com/org/gitops-repo.git\n    targetRevision: HEAD\n    path: production/service-a\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: service-a\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n    syncOptions:\n    - CreateNamespace=true\n</code></pre>","tags":["gitops","argocd","kubernetes","ci/cd","deployment"]},{"location":"blog/2024/07/01/gitops-with-argocd-best-practices/#key-best-practices","title":"Key Best Practices","text":"","tags":["gitops","argocd","kubernetes","ci/cd","deployment"]},{"location":"blog/2024/07/01/gitops-with-argocd-best-practices/#1-environment-promotion-strategy","title":"1. Environment Promotion Strategy","text":"<p>We use branch-based promotion:</p> <ul> <li><code>main</code> branch \u2192 Production</li> <li><code>staging</code> branch \u2192 Staging  </li> <li><code>develop</code> branch \u2192 Development</li> </ul>","tags":["gitops","argocd","kubernetes","ci/cd","deployment"]},{"location":"blog/2024/07/01/gitops-with-argocd-best-practices/#2-secret-management","title":"2. Secret Management","text":"<p>Never store secrets in Git. We use External Secrets Operator:</p> <pre><code>apiVersion: external-secrets.io/v1beta1\nkind: ExternalSecret\nmetadata:\n  name: database-credentials\nspec:\n  refreshInterval: 1h\n  secretStoreRef:\n    name: aws-secretsmanager\n    kind: ClusterSecretStore\n  target:\n    name: database-credentials\n  data:\n  - secretKey: username\n    remoteRef:\n      key: prod/db/credentials\n      property: username\n  - secretKey: password\n    remoteRef:\n      key: prod/db/credentials\n      property: password\n</code></pre>","tags":["gitops","argocd","kubernetes","ci/cd","deployment"]},{"location":"blog/2024/07/01/gitops-with-argocd-best-practices/#3-application-of-applications-pattern","title":"3. Application of Applications Pattern","text":"<p>We use ArgoCD's App of Apps pattern for managing multiple applications:</p> <pre><code>apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: all-apps\n  namespace: argocd\nspec:\n  project: default\n  source:\n    repoURL: https://github.com/org/gitops-repo.git\n    targetRevision: HEAD\n    path: apps\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: argocd\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n</code></pre>","tags":["gitops","argocd","kubernetes","ci/cd","deployment"]},{"location":"blog/2024/07/01/gitops-with-argocd-best-practices/#results-and-benefits","title":"Results and Benefits","text":"<p>After 12 months of GitOps with ArgoCD:</p> <ul> <li>99.5% deployment success rate</li> <li>75% reduction in deployment time</li> <li>Zero configuration drift incidents</li> <li>100% audit trail coverage</li> <li>50% reduction in rollback time</li> </ul>","tags":["gitops","argocd","kubernetes","ci/cd","deployment"]},{"location":"blog/2024/07/01/gitops-with-argocd-best-practices/#challenges-and-solutions","title":"Challenges and Solutions","text":"","tags":["gitops","argocd","kubernetes","ci/cd","deployment"]},{"location":"blog/2024/07/01/gitops-with-argocd-best-practices/#challenge-managing-secrets","title":"Challenge: Managing Secrets","text":"<p>Solution: External Secrets Operator + AWS Secrets Manager</p>","tags":["gitops","argocd","kubernetes","ci/cd","deployment"]},{"location":"blog/2024/07/01/gitops-with-argocd-best-practices/#challenge-scaling-to-multiple-teams","title":"Challenge: Scaling to Multiple Teams","text":"<p>Solution: ArgoCD Projects with RBAC</p>","tags":["gitops","argocd","kubernetes","ci/cd","deployment"]},{"location":"blog/2024/07/01/gitops-with-argocd-best-practices/#challenge-progressive-delivery","title":"Challenge: Progressive Delivery","text":"<p>Solution: Argo Rollouts for canary deployments</p>","tags":["gitops","argocd","kubernetes","ci/cd","deployment"]},{"location":"blog/2024/07/01/gitops-with-argocd-best-practices/#conclusion","title":"Conclusion","text":"<p>GitOps with ArgoCD has transformed our deployment process, making it more reliable, auditable, and scalable. The key is to start with a solid foundation of best practices and continuously refine your approach as you scale.</p>","tags":["gitops","argocd","kubernetes","ci/cd","deployment"]},{"location":"blog/2024/07/15/scaling-kubernetes-at-enterprise-level/","title":"Scaling Kubernetes at Enterprise Level","text":"<p>When you're managing Kubernetes infrastructure for 50+ development teams, you quickly learn that what works for a small startup doesn't scale to enterprise environments. Here are the key lessons I've learned from building and scaling our Kubernetes platform at Commonwealth Bank.</p>","tags":["kubernetes","scaling","enterprise","platform","multi-tenancy"]},{"location":"blog/2024/07/15/scaling-kubernetes-at-enterprise-level/#the-challenge","title":"The Challenge","text":"<p>Our journey started with a simple question: How do we provide a self-service platform that allows development teams to deploy their applications without compromising security, reliability, or cost efficiency?</p> <p>The answer wasn't just about Kubernetes itself, but about building the right abstractions and tooling around it.</p>","tags":["kubernetes","scaling","enterprise","platform","multi-tenancy"]},{"location":"blog/2024/07/15/scaling-kubernetes-at-enterprise-level/#key-architectural-decisions","title":"Key Architectural Decisions","text":"","tags":["kubernetes","scaling","enterprise","platform","multi-tenancy"]},{"location":"blog/2024/07/15/scaling-kubernetes-at-enterprise-level/#1-multi-tenancy-strategy","title":"1. Multi-Tenancy Strategy","text":"<p>We implemented a namespace-per-team approach with strict RBAC policies:</p> <pre><code>apiVersion: v1\nkind: Namespace\nmetadata:\n  name: team-payments\n  labels:\n    team: payments\n    cost-center: \"12345\"\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  namespace: team-payments\n  name: team-payments-developers\nsubjects:\n- kind: Group\n  name: team-payments\n  apiGroup: rbac.authorization.k8s.io\nroleRef:\n  kind: ClusterRole\n  name: developer\n  apiGroup: rbac.authorization.k8s.io\n</code></pre>","tags":["kubernetes","scaling","enterprise","platform","multi-tenancy"]},{"location":"blog/2024/07/15/scaling-kubernetes-at-enterprise-level/#2-resource-governance","title":"2. Resource Governance","text":"<p>Every namespace gets default resource quotas and limit ranges:</p> <ul> <li>CPU: 4 cores per namespace</li> <li>Memory: 8GB per namespace  </li> <li>Storage: 50GB per namespace</li> <li>Pod count: 20 pods maximum</li> </ul>","tags":["kubernetes","scaling","enterprise","platform","multi-tenancy"]},{"location":"blog/2024/07/15/scaling-kubernetes-at-enterprise-level/#3-gitops-everything","title":"3. GitOps Everything","text":"<p>We use ArgoCD for all deployments with a strict GitOps workflow:</p> <ol> <li>Developers push to their app repo</li> <li>CI pipeline builds and pushes images</li> <li>CI updates the GitOps repo</li> <li>ArgoCD syncs changes to the cluster</li> </ol>","tags":["kubernetes","scaling","enterprise","platform","multi-tenancy"]},{"location":"blog/2024/07/15/scaling-kubernetes-at-enterprise-level/#monitoring-and-observability","title":"Monitoring and Observability","text":"<p>The key metrics we track:</p> <ul> <li>Resource utilization per team</li> <li>Deployment frequency and success rates</li> <li>MTTR for incidents</li> <li>Cost allocation by team/project</li> </ul>","tags":["kubernetes","scaling","enterprise","platform","multi-tenancy"]},{"location":"blog/2024/07/15/scaling-kubernetes-at-enterprise-level/#results","title":"Results","text":"<p>After 18 months of operation:</p> <ul> <li>99.9% platform uptime</li> <li>40% reduction in infrastructure costs</li> <li>80% faster deployment times</li> <li>Zero security incidents</li> </ul>","tags":["kubernetes","scaling","enterprise","platform","multi-tenancy"]},{"location":"blog/2024/07/15/scaling-kubernetes-at-enterprise-level/#key-takeaways","title":"Key Takeaways","text":"<ol> <li>Start with governance - Set up RBAC, quotas, and policies from day one</li> <li>Automate everything - Manual processes don't scale</li> <li>Monitor costs - Kubernetes can get expensive fast without proper controls</li> <li>Invest in developer experience - Self-service capabilities are crucial</li> <li>Plan for failure - Chaos engineering and disaster recovery are essential</li> </ol> <p>The journey to enterprise-scale Kubernetes isn't just about the technology - it's about building the right processes, tooling, and culture around it.</p>","tags":["kubernetes","scaling","enterprise","platform","multi-tenancy"]},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/category/kubernetes/","title":"Kubernetes","text":""},{"location":"blog/category/platform-engineering/","title":"Platform Engineering","text":""},{"location":"blog/category/devops/","title":"DevOps","text":""},{"location":"blog/category/aws/","title":"AWS","text":""},{"location":"blog/category/cost-optimization/","title":"Cost Optimization","text":""},{"location":"blog/category/cloud/","title":"Cloud","text":""},{"location":"blog/category/gitops/","title":"GitOps","text":""},{"location":"blog/category/cicd/","title":"CI/CD","text":""}]}