{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Alan Liang","text":""},{"location":"#staff-platform-engineer","title":"Staff Platform Engineer","text":"<p>I architect and scale cloud infrastructure at Commonwealth Bank of Australia, specializing in AWS, DevOps, and Kubernetes solutions.</p>"},{"location":"#about-me","title":"About Me","text":"<p>I'm a passionate Staff Platform Engineer at Commonwealth Bank of Australia with extensive experience building and scaling cloud-native infrastructure. I specialize in AWS cloud architecture, DevOps automation, and Kubernetes orchestration, helping teams deliver reliable, scalable solutions.</p> <p>I love solving complex distributed systems challenges and mentoring teams on cloud-native best practices. My expertise spans infrastructure as code, CI/CD pipelines, and container orchestration at enterprise scale.</p>"},{"location":"#skills","title":"Skills","text":"<ul> <li>AWS</li> <li>Kubernetes</li> <li>Docker</li> <li>Terraform</li> <li>Jenkins</li> <li>Python</li> <li>Go</li> <li>GitOps</li> </ul>"},{"location":"#my-work","title":"My Work","text":""},{"location":"#multi-cloud-platform-migration","title":"Multi-Cloud Platform Migration","text":"<p>Led enterprise-scale migration of legacy systems to AWS, implementing microservices architecture with 99.9% uptime and 40% cost reduction.</p> <p>Technologies: AWS EKS, Terraform, Istio, ArgoCD</p>"},{"location":"#cicd-pipeline-optimization","title":"CI/CD Pipeline Optimization","text":"<p>Built automated deployment pipelines reducing deployment time from hours to minutes, with comprehensive testing and rollback capabilities.</p> <p>Technologies: Jenkins, GitLab CI, Docker, Helm</p>"},{"location":"#kubernetes-platform-engineering","title":"Kubernetes Platform Engineering","text":"<p>Designed and implemented self-service Kubernetes platform serving 50+ development teams with automated scaling and monitoring.</p> <p>Technologies: Kubernetes, Prometheus, Grafana, FluxCD</p>"},{"location":"#contact","title":"Contact","text":"<p>Let's discuss cloud architecture, platform engineering, or DevOps challenges.</p> <ul> <li>Email: alan.liang@example.com</li> <li>LinkedIn: linkedin.com/in/alan-liang</li> <li>GitHub: github.com/alan-liang</li> </ul>"},{"location":"blog/aws-cost-optimization/","title":"AWS Cost Optimization Strategies","text":"<p>Cloud costs can spiral out of control quickly, especially in large organizations. Here's how we reduced our AWS bill by 40% without compromising performance or reliability.</p>"},{"location":"blog/aws-cost-optimization/#the-problem","title":"The Problem","text":"<p>Our monthly AWS bill had grown to over $500K, with costs increasing 20% quarter-over-quarter. Leadership wanted answers, and more importantly, they wanted results.</p>"},{"location":"blog/aws-cost-optimization/#our-approach","title":"Our Approach","text":""},{"location":"blog/aws-cost-optimization/#1-visibility-first","title":"1. Visibility First","text":"<p>You can't optimize what you can't measure. We implemented comprehensive cost tracking:</p> <pre><code># Cost allocation tagging strategy\nREQUIRED_TAGS = {\n    'Environment': ['prod', 'staging', 'dev'],\n    'Team': 'team-name',\n    'Project': 'project-code',\n    'CostCenter': 'cost-center-id'\n}\n\n# Automated tagging enforcement\ndef enforce_tagging(resource):\n    missing_tags = []\n    for tag, values in REQUIRED_TAGS.items():\n        if tag not in resource.tags:\n            missing_tags.append(tag)\n\n    if missing_tags:\n        send_alert(f\"Resource {resource.id} missing tags: {missing_tags}\")\n        # Auto-shutdown non-compliant resources after 7 days\n</code></pre>"},{"location":"blog/aws-cost-optimization/#2-right-sizing-instances","title":"2. Right-Sizing Instances","text":"<p>We found that 60% of our EC2 instances were over-provisioned:</p> <ul> <li>Analysis period: 30 days of CloudWatch metrics</li> <li>Key metrics: CPU utilization, memory usage, network I/O</li> <li>Action: Automated recommendations with approval workflow</li> </ul> <p>Results: 25% reduction in EC2 costs</p>"},{"location":"blog/aws-cost-optimization/#3-reserved-instance-strategy","title":"3. Reserved Instance Strategy","text":"<p>Implemented a data-driven RI purchasing strategy:</p> <pre><code># Calculate optimal RI mix\naws ce get-reservation-coverage \\\n  --time-period Start=2024-01-01,End=2024-01-31 \\\n  --group-by Type=DIMENSION,Key=SERVICE \\\n  --metrics UnblendedCost\n</code></pre> <p>Results: 30% savings on predictable workloads</p>"},{"location":"blog/aws-cost-optimization/#4-storage-optimization","title":"4. Storage Optimization","text":"<p>S3 storage was our second-largest cost driver:</p> <ul> <li>Lifecycle policies: Automatic transition to IA/Glacier</li> <li>Intelligent Tiering: For unpredictable access patterns</li> <li>Duplicate detection: Removed 2TB of duplicate data</li> </ul> <pre><code>{\n  \"Rules\": [{\n    \"ID\": \"OptimizeStorage\",\n    \"Status\": \"Enabled\",\n    \"Transitions\": [\n      {\n        \"Days\": 30,\n        \"StorageClass\": \"STANDARD_IA\"\n      },\n      {\n        \"Days\": 90,\n        \"StorageClass\": \"GLACIER\"\n      }\n    ]\n  }]\n}\n</code></pre>"},{"location":"blog/aws-cost-optimization/#5-auto-scaling-optimization","title":"5. Auto-Scaling Optimization","text":"<p>Fine-tuned our auto-scaling policies:</p> <ul> <li>Predictive scaling: Based on historical patterns</li> <li>Custom metrics: Application-specific scaling triggers</li> <li>Scheduled scaling: For known traffic patterns</li> </ul>"},{"location":"blog/aws-cost-optimization/#monitoring-and-governance","title":"Monitoring and Governance","text":""},{"location":"blog/aws-cost-optimization/#cost-anomaly-detection","title":"Cost Anomaly Detection","text":"<p>Set up automated alerts for unusual spending:</p> <pre><code># CloudWatch alarm for cost anomalies\nCostAnomalyAlarm:\n  Type: AWS::CloudWatch::Alarm\n  Properties:\n    AlarmName: UnusualSpending\n    MetricName: EstimatedCharges\n    Threshold: 1000\n    ComparisonOperator: GreaterThanThreshold\n    EvaluationPeriods: 1\n</code></pre>"},{"location":"blog/aws-cost-optimization/#regular-cost-reviews","title":"Regular Cost Reviews","text":"<p>Monthly cost review meetings with: - Team leads - Finance stakeholders - Engineering managers</p>"},{"location":"blog/aws-cost-optimization/#results-after-6-months","title":"Results After 6 Months","text":"Category Before After Savings EC2 $200K $150K 25% S3 $80K $50K 37% RDS $120K $90K 25% Total $500K $300K 40%"},{"location":"blog/aws-cost-optimization/#key-lessons","title":"Key Lessons","text":"<ol> <li>Tagging is critical - Without proper tagging, you're flying blind</li> <li>Automate everything - Manual cost optimization doesn't scale</li> <li>Culture matters - Make cost awareness part of your engineering culture</li> <li>Regular reviews - Set up recurring cost review processes</li> <li>Start small - Pick low-hanging fruit first to build momentum</li> </ol>"},{"location":"blog/aws-cost-optimization/#tools-we-used","title":"Tools We Used","text":"<ul> <li>AWS Cost Explorer: For analysis and reporting</li> <li>AWS Trusted Advisor: For optimization recommendations  </li> <li>CloudHealth: For multi-account cost management</li> <li>Custom dashboards: Built with CloudWatch and Grafana</li> </ul> <p>Cost optimization isn't a one-time project - it's an ongoing discipline that requires the right tools, processes, and culture.</p>"},{"location":"blog/kubernetes-scaling/","title":"Scaling Kubernetes at Enterprise Level","text":"<p>When you're managing Kubernetes infrastructure for 50+ development teams, you quickly learn that what works for a small startup doesn't scale to enterprise environments. Here are the key lessons I've learned from building and scaling our Kubernetes platform at Commonwealth Bank.</p>"},{"location":"blog/kubernetes-scaling/#the-challenge","title":"The Challenge","text":"<p>Our journey started with a simple question: How do we provide a self-service platform that allows development teams to deploy their applications without compromising security, reliability, or cost efficiency?</p> <p>The answer wasn't just about Kubernetes itself, but about building the right abstractions and tooling around it.</p>"},{"location":"blog/kubernetes-scaling/#key-architectural-decisions","title":"Key Architectural Decisions","text":""},{"location":"blog/kubernetes-scaling/#1-multi-tenancy-strategy","title":"1. Multi-Tenancy Strategy","text":"<p>We implemented a namespace-per-team approach with strict RBAC policies:</p> <pre><code>apiVersion: v1\nkind: Namespace\nmetadata:\n  name: team-payments\n  labels:\n    team: payments\n    cost-center: \"12345\"\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  namespace: team-payments\n  name: team-payments-developers\nsubjects:\n- kind: Group\n  name: team-payments\n  apiGroup: rbac.authorization.k8s.io\nroleRef:\n  kind: ClusterRole\n  name: developer\n  apiGroup: rbac.authorization.k8s.io\n</code></pre>"},{"location":"blog/kubernetes-scaling/#2-resource-governance","title":"2. Resource Governance","text":"<p>Every namespace gets default resource quotas and limit ranges:</p> <ul> <li>CPU: 4 cores per namespace</li> <li>Memory: 8GB per namespace  </li> <li>Storage: 50GB per namespace</li> <li>Pod count: 20 pods maximum</li> </ul>"},{"location":"blog/kubernetes-scaling/#3-gitops-everything","title":"3. GitOps Everything","text":"<p>We use ArgoCD for all deployments with a strict GitOps workflow:</p> <ol> <li>Developers push to their app repo</li> <li>CI pipeline builds and pushes images</li> <li>CI updates the GitOps repo</li> <li>ArgoCD syncs changes to the cluster</li> </ol>"},{"location":"blog/kubernetes-scaling/#monitoring-and-observability","title":"Monitoring and Observability","text":"<p>The key metrics we track:</p> <ul> <li>Resource utilization per team</li> <li>Deployment frequency and success rates</li> <li>MTTR for incidents</li> <li>Cost allocation by team/project</li> </ul>"},{"location":"blog/kubernetes-scaling/#results","title":"Results","text":"<p>After 18 months of operation:</p> <ul> <li>99.9% platform uptime</li> <li>40% reduction in infrastructure costs</li> <li>80% faster deployment times</li> <li>Zero security incidents</li> </ul>"},{"location":"blog/kubernetes-scaling/#key-takeaways","title":"Key Takeaways","text":"<ol> <li>Start with governance - Set up RBAC, quotas, and policies from day one</li> <li>Automate everything - Manual processes don't scale</li> <li>Monitor costs - Kubernetes can get expensive fast without proper controls</li> <li>Invest in developer experience - Self-service capabilities are crucial</li> <li>Plan for failure - Chaos engineering and disaster recovery are essential</li> </ol> <p>The journey to enterprise-scale Kubernetes isn't just about the technology - it's about building the right processes, tooling, and culture around it.</p>"}]}