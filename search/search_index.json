{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Hi, I'm Alan Liang.","text":"<p>I architect and scale cloud infrastructure at Commonwealth Bank of Australia, specializing in AWS, DevOps, and Kubernetes solutions. I love solving complex distributed systems challenges and mentoring teams on cloud-native best practices.</p> Subscribe via email Subscribe"},{"location":"#latest-blog-posts","title":"Latest Blog Posts","text":"Jul 15, 24 Scaling Kubernetes at Enterprise Level <p>Taking enterprise Kubernetes from complex to manageable with proper governance and automation...</p> Jul 08, 24 AWS Cost Optimization Strategies <p>How we reduced our AWS bill by 40% without compromising performance or reliability...</p> Jul 01, 24 GitOps with ArgoCD: Best Practices <p>Implementing GitOps workflows that scale across multiple environments and teams...</p>"},{"location":"404/","title":"404 - Page not found","text":"<p>Sorry, the page you're looking for doesn't exist.</p> <p>Return to Home</p>"},{"location":"about/","title":"About Me","text":"<p>I'm a passionate Staff Platform Engineer at Commonwealth Bank of Australia with extensive experience building and scaling cloud-native infrastructure. I specialize in AWS cloud architecture, DevOps automation, and Kubernetes orchestration, helping teams deliver reliable, scalable solutions.</p> <p>I love solving complex distributed systems challenges and mentoring teams on cloud-native best practices. My expertise spans infrastructure as code, CI/CD pipelines, and container orchestration at enterprise scale.</p>"},{"location":"about/#skills","title":"Skills","text":"<ul> <li>AWS</li> <li>Kubernetes</li> <li>Docker</li> <li>Terraform</li> <li>Jenkins</li> <li>Python</li> <li>Go</li> <li>GitOps</li> </ul>"},{"location":"about/#work-experience","title":"Work Experience","text":""},{"location":"about/#staff-platform-engineer-commonwealth-bank-of-australia","title":"Staff Platform Engineer - Commonwealth Bank of Australia","text":"<p>2020 - Present</p> <ul> <li>Led enterprise-scale migration of legacy systems to AWS, implementing microservices architecture with 99.9% uptime and 40% cost reduction.</li> <li>Built automated deployment pipelines reducing deployment time from hours to minutes, with comprehensive testing and rollback capabilities.</li> <li>Designed and implemented self-service Kubernetes platform serving 50+ development teams with automated scaling and monitoring.</li> </ul>"},{"location":"about/#senior-devops-engineer-previous-company","title":"Senior DevOps Engineer - Previous Company","text":"<p>2017 - 2020</p> <ul> <li>Implemented CI/CD pipelines using Jenkins and GitLab CI, reducing deployment time by 70%.</li> <li>Migrated on-premise infrastructure to AWS, resulting in 30% cost savings and improved scalability.</li> <li>Introduced containerization with Docker and Kubernetes, improving application portability and resource utilization.</li> </ul>"},{"location":"blog/","title":"Blog","text":"<p>Welcome to my blog where I share insights about cloud infrastructure, DevOps, and platform engineering.</p>"},{"location":"blog/#latest-posts","title":"Latest Posts","text":""},{"location":"blog/2024/07/08/aws-cost-optimization-strategies/","title":"AWS Cost Optimization Strategies","text":"<p>Managing cloud costs at enterprise scale requires a systematic approach. Here's how we reduced our AWS bill by 40% while maintaining performance and reliability.</p>","tags":["aws","cost","optimization","finops"]},{"location":"blog/2024/07/08/aws-cost-optimization-strategies/#the-problem","title":"The Problem","text":"<p>Our AWS costs were growing faster than our business. Despite having monitoring in place, we lacked visibility into cost drivers and optimization opportunities.</p>","tags":["aws","cost","optimization","finops"]},{"location":"blog/2024/07/08/aws-cost-optimization-strategies/#our-approach","title":"Our Approach","text":"","tags":["aws","cost","optimization","finops"]},{"location":"blog/2024/07/08/aws-cost-optimization-strategies/#1-right-sizing-resources","title":"1. Right-Sizing Resources","text":"<p>We implemented automated right-sizing recommendations:</p> <ul> <li>EC2 instances: Downsized 30% of instances</li> <li>RDS databases: Optimized instance types</li> <li>EBS volumes: Converted to gp3 where appropriate</li> </ul>","tags":["aws","cost","optimization","finops"]},{"location":"blog/2024/07/08/aws-cost-optimization-strategies/#2-reserved-instance-strategy","title":"2. Reserved Instance Strategy","text":"<ul> <li>Purchased 1-year RIs for stable workloads</li> <li>Used Savings Plans for compute flexibility</li> <li>Achieved 60% coverage on compute costs</li> </ul>","tags":["aws","cost","optimization","finops"]},{"location":"blog/2024/07/08/aws-cost-optimization-strategies/#3-storage-optimization","title":"3. Storage Optimization","text":"<ul> <li>Implemented S3 lifecycle policies</li> <li>Moved infrequent data to IA storage classes</li> <li>Enabled S3 Intelligent Tiering</li> </ul>","tags":["aws","cost","optimization","finops"]},{"location":"blog/2024/07/08/aws-cost-optimization-strategies/#results","title":"Results","text":"<ul> <li>40% cost reduction in 6 months</li> <li>Zero performance impact</li> <li>Improved cost visibility across teams</li> </ul> <p>The key is treating cost optimization as an ongoing process, not a one-time project.</p>","tags":["aws","cost","optimization","finops"]},{"location":"blog/2024/07/01/gitops-with-argocd-best-practices/","title":"GitOps with ArgoCD: Best Practices","text":"<p>Implementing GitOps at scale requires careful planning and the right tooling. Here's how we built a GitOps platform that serves 50+ development teams.</p>","tags":["gitops","argocd","kubernetes","deployment"]},{"location":"blog/2024/07/01/gitops-with-argocd-best-practices/#why-gitops","title":"Why GitOps?","text":"<p>GitOps provides:</p> <ul> <li>Declarative deployments</li> <li>Version control for infrastructure</li> <li>Automated rollbacks</li> <li>Audit trails</li> </ul>","tags":["gitops","argocd","kubernetes","deployment"]},{"location":"blog/2024/07/01/gitops-with-argocd-best-practices/#our-argocd-setup","title":"Our ArgoCD Setup","text":"","tags":["gitops","argocd","kubernetes","deployment"]},{"location":"blog/2024/07/01/gitops-with-argocd-best-practices/#application-of-applications-pattern","title":"Application of Applications Pattern","text":"<p>We use the \"app of apps\" pattern to manage multiple applications:</p> <pre><code>apiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: team-applications\n  namespace: argocd\nspec:\n  project: default\n  source:\n    repoURL: https://github.com/company/gitops-apps\n    targetRevision: HEAD\n    path: teams/\n  destination:\n    server: https://kubernetes.default.svc\n  syncPolicy:\n    automated:\n      prune: true\n      selfHeal: true\n</code></pre>","tags":["gitops","argocd","kubernetes","deployment"]},{"location":"blog/2024/07/01/gitops-with-argocd-best-practices/#multi-environment-strategy","title":"Multi-Environment Strategy","text":"<ul> <li>Development: Auto-sync enabled</li> <li>Staging: Manual sync with approval</li> <li>Production: Manual sync with multiple approvals</li> </ul>","tags":["gitops","argocd","kubernetes","deployment"]},{"location":"blog/2024/07/01/gitops-with-argocd-best-practices/#security-considerations","title":"Security Considerations","text":"<ol> <li>RBAC: Team-specific access controls</li> <li>Secret management: External Secrets Operator</li> <li>Image scanning: Integrated with Harbor registry</li> <li>Policy enforcement: Open Policy Agent</li> </ol>","tags":["gitops","argocd","kubernetes","deployment"]},{"location":"blog/2024/07/01/gitops-with-argocd-best-practices/#results","title":"Results","text":"<ul> <li>99.5% deployment success rate</li> <li>5 minute average deployment time</li> <li>Zero configuration drift incidents</li> <li>100% audit compliance</li> </ul> <p>GitOps isn't just about tools - it's about establishing reliable, repeatable processes that scale with your organization.</p>","tags":["gitops","argocd","kubernetes","deployment"]},{"location":"blog/2024/07/15/scaling-kubernetes-at-enterprise-level/","title":"Scaling Kubernetes at Enterprise Level","text":"<p>When you're managing Kubernetes infrastructure for 50+ development teams, you quickly learn that what works for a small startup doesn't scale to enterprise environments. Here are the key lessons I've learned from building and scaling our Kubernetes platform at Commonwealth Bank.</p>","tags":["kubernetes","scaling","enterprise","platform","multi-tenancy"]},{"location":"blog/2024/07/15/scaling-kubernetes-at-enterprise-level/#the-challenge","title":"The Challenge","text":"<p>Our journey started with a simple question: How do we provide a self-service platform that allows development teams to deploy their applications without compromising security, reliability, or cost efficiency?</p> <p>The answer wasn't just about Kubernetes itself, but about building the right abstractions and tooling around it.</p>","tags":["kubernetes","scaling","enterprise","platform","multi-tenancy"]},{"location":"blog/2024/07/15/scaling-kubernetes-at-enterprise-level/#key-architectural-decisions","title":"Key Architectural Decisions","text":"","tags":["kubernetes","scaling","enterprise","platform","multi-tenancy"]},{"location":"blog/2024/07/15/scaling-kubernetes-at-enterprise-level/#1-multi-tenancy-strategy","title":"1. Multi-Tenancy Strategy","text":"<p>We implemented a namespace-per-team approach with strict RBAC policies:</p> <pre><code>apiVersion: v1\nkind: Namespace\nmetadata:\n  name: team-payments\n  labels:\n    team: payments\n    cost-center: \"12345\"\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  namespace: team-payments\n  name: team-payments-developers\nsubjects:\n- kind: Group\n  name: team-payments\n  apiGroup: rbac.authorization.k8s.io\nroleRef:\n  kind: ClusterRole\n  name: developer\n  apiGroup: rbac.authorization.k8s.io\n</code></pre>","tags":["kubernetes","scaling","enterprise","platform","multi-tenancy"]},{"location":"blog/2024/07/15/scaling-kubernetes-at-enterprise-level/#2-resource-governance","title":"2. Resource Governance","text":"<p>Every namespace gets default resource quotas and limit ranges:</p> <ul> <li>CPU: 4 cores per namespace</li> <li>Memory: 8GB per namespace  </li> <li>Storage: 50GB per namespace</li> <li>Pod count: 20 pods maximum</li> </ul>","tags":["kubernetes","scaling","enterprise","platform","multi-tenancy"]},{"location":"blog/2024/07/15/scaling-kubernetes-at-enterprise-level/#3-gitops-everything","title":"3. GitOps Everything","text":"<p>We use ArgoCD for all deployments with a strict GitOps workflow:</p> <ol> <li>Developers push to their app repo</li> <li>CI pipeline builds and pushes images</li> <li>CI updates the GitOps repo</li> <li>ArgoCD syncs changes to the cluster</li> </ol>","tags":["kubernetes","scaling","enterprise","platform","multi-tenancy"]},{"location":"blog/2024/07/15/scaling-kubernetes-at-enterprise-level/#monitoring-and-observability","title":"Monitoring and Observability","text":"<p>The key metrics we track:</p> <ul> <li>Resource utilization per team</li> <li>Deployment frequency and success rates</li> <li>MTTR for incidents</li> <li>Cost allocation by team/project</li> </ul>","tags":["kubernetes","scaling","enterprise","platform","multi-tenancy"]},{"location":"blog/2024/07/15/scaling-kubernetes-at-enterprise-level/#results","title":"Results","text":"<p>After 18 months of operation:</p> <ul> <li>99.9% platform uptime</li> <li>40% reduction in infrastructure costs</li> <li>80% faster deployment times</li> <li>Zero security incidents</li> </ul>","tags":["kubernetes","scaling","enterprise","platform","multi-tenancy"]},{"location":"blog/2024/07/15/scaling-kubernetes-at-enterprise-level/#key-takeaways","title":"Key Takeaways","text":"<ol> <li>Start with governance - Set up RBAC, quotas, and policies from day one</li> <li>Automate everything - Manual processes don't scale</li> <li>Monitor costs - Kubernetes can get expensive fast without proper controls</li> <li>Invest in developer experience - Self-service capabilities are crucial</li> <li>Plan for failure - Chaos engineering and disaster recovery are essential</li> </ol> <p>The journey to enterprise-scale Kubernetes isn't just about the technology - it's about building the right processes, tooling, and culture around it.</p>","tags":["kubernetes","scaling","enterprise","platform","multi-tenancy"]},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/category/kubernetes/","title":"Kubernetes","text":""},{"location":"blog/category/platform-engineering/","title":"Platform Engineering","text":""},{"location":"blog/category/devops/","title":"DevOps","text":""},{"location":"blog/category/aws/","title":"AWS","text":""},{"location":"blog/category/cost-optimization/","title":"Cost Optimization","text":""},{"location":"blog/category/cloud/","title":"Cloud","text":""},{"location":"blog/category/gitops/","title":"GitOps","text":""},{"location":"blog/category/argocd/","title":"ArgoCD","text":""},{"location":"blog/category/cicd/","title":"CI/CD","text":""}]}